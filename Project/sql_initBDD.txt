-- phpMyAdmin SQL Dump
-- version 4.8.3
-- https://www.phpmyadmin.net/
--
-- Hôte : localhost:8889
-- Généré le :  mer. 06 fév. 2019 à 11:39
-- Version du serveur :  5.7.23
-- Version de PHP :  7.2.10

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";

--
-- Base de données :  `cf_poo_php`
--

-- --------------------------------------------------------

--
-- Structure de la table `article`
--

CREATE TABLE `article` (
  `id` tinyint(3) UNSIGNED NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `content` longtext NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Structure de la table `media`
--

CREATE TABLE `media` (
  `id` tinyint(3) UNSIGNED NOT NULL,
  `name` varchar(50) NOT NULL,
  `type` varchar(10) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Structure de la table `user`
--

CREATE TABLE `user` (
  `id` tinyint(3) UNSIGNED NOT NULL,
  `name` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `media`
--
ALTER TABLE `media`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `article`
--
ALTER TABLE `article`
  MODIFY `id` tinyint(3) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT pour la table `media`
--
ALTER TABLE `media`
  MODIFY `id` tinyint(3) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT pour la table `user`
--
ALTER TABLE `user`
  MODIFY `id` tinyint(3) UNSIGNED NOT NULL AUTO_INCREMENT;




CREATE TABLE `article` (
  `id` tinyint(3) UNSIGNED NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `content` longtext COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Déchargement des données de la table `article`
--

INSERT INTO `article` (`id`, `title`, `content`) VALUES
(3, 'Accueil', '        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">Bonjour.</h1>\r\n                <p class=\"lead\">Le projet des 4 Fantastiques Ã  pour objet de prÃ©senter de maniÃ¨re concrÃ¨te la POO en PHP. Ce site est entiÃ¨rement fabriquÃ© en orientÃ© objet.</p>\r\n                <p class=\"lead\">Ce projet est fait dans les locaux de la Coding Factory par Benjamin, Doryan, CÃ©dric et (Florian)</p>\r\n                <p class=\"lead\">Î¤Î¿ Î­ÏÎ³Î¿ Fantastic 4 ÏƒÏ„Î¿Ï‡ÎµÏÎµÎ¹ Î½Î± Ï€Î±ÏÎ¿Ï…ÏƒÎ¹Î¬ÏƒÎµÎ¹ ÏƒÏ…Î³ÎºÎµÎºÏÎ¹Î¼Î­Î½Î± Ï„Î¿ OOP ÏƒÏ„Î·Î½ PHP. Î‘Ï…Ï„ÏŒÏ‚ Î¿ Î¹ÏƒÏ„ÏŒÏ„Î¿Ï€Î¿Ï‚ Î­Ï‡ÎµÎ¹ ÎºÎ±Ï„Î±ÏƒÎºÎµÏ…Î±ÏƒÏ„ÎµÎ¯ ÎµÎ¾ Î¿Î»Î¿ÎºÎ»Î®ÏÎ¿Ï… ÏƒÎµ Î±Î½Ï„Î¹ÎºÎµÎ¹Î¼ÎµÎ½Î¿ÏƒÏ„ÏÎ±Ï†Î®.\r\n\r\nÎ¤Î¿ Î­ÏÎ³Î¿ Î±Ï…Ï„ÏŒ Î³Î¯Î½ÎµÏ„Î±Î¹ ÏƒÏ„Î¹Ï‚ ÎµÎ³ÎºÎ±Ï„Î±ÏƒÏ„Î¬ÏƒÎµÎ¹Ï‚ Ï„Î¿Ï… Î•ÏÎ³Î¿ÏƒÏ„Î±ÏƒÎ¯Î¿Ï… ÎšÏ‰Î´Î¹ÎºÎ¿Ï€Î¿Î¯Î·ÏƒÎ·Ï‚ Î±Ï€ÏŒ Ï„Î¿Î½ Benjamin, Doryan, CÃ©dric ÎºÎ±Î¹ (Florian)</p>\r\n            </div>\r\n        </div>'),
(4, 'Les classes et mÃ©thodes version procÃ©durale et POO', '            <!-- Story 2 --->\r\n            <section class=\"container-fluid\" id=\"class\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-11\"><h2>Les classes et mÃ©thodes version procÃ©durale et POO</h2></div>\r\n                </div>\r\n\r\n                <!-- POO\'s way -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-4 examples\">\r\n                        <pre><code class=\"php\">\r\n    Class Pays {\r\n        protected $name;\r\n        protected $flag;\r\n        protected $language;\r\n\r\n        public function describe()\r\n        {\r\n        $description =  $name\r\n          + \" parle \" + $language\r\n          + \" a le drapeau \" + $drapeau;\r\n\r\n        return $description;\r\n        }\r\n    }\r\n                        </code></pre>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-5 explanations\"><p>Une <em>classe</em> PHP est un ensemble de code cohÃ©rent permettant de dÃ©finir de maniÃ¨re abstraite un objet.</p>\r\n                    <p>Les <em>classes</em> en orientÃ©e objet sont rÃ©utilisable dans le sens, oÃ¹, si je donne ma <em>classe</em> Ã  une personne, il sera en mesure de l\'utiliser sans avoir Ã  l\'adapter.</p>\r\n                    <p>Ces <em>classes</em> contiennent des <em>attibuts</em> correspondants Ã  des <em>propriÃ©tÃ©s</em> et des <em>mÃ©thodes</em> correspondant Ã  des fonctions.</p>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                </div>\r\n\r\n                <!-- Functional\'s way -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-5 explanations\">\r\n                        <p>De maniÃ¨re procÃ©durale, on ne peut pas instancier d\'objet,</p><p> ce qui ne permet pas de personification.</p>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-4 examples\">\r\n                        <pre><code>\r\nfunction describe($name, $flag, $language)\r\n    {\r\n        $pays = $name + \" parle \"\r\n        + $language + \" a le drapeau \" + $flag;\r\n\r\n        return $pays;\r\n    }\r\n                        </code></pre>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                </div>\r\n\r\n            </section>'),
(5, 'Accesseurs, mutateurs, constructeur et hydratation', '            <section class=\"container-fluid greybk_whitecolor\" id=\"acess\">\r\n                <div class=\"row\">\r\n                <div class=\"col-11 text-right\"><h2>Accesseurs, mutateurs, constructeur et hydratation</h2></div>\r\n                <div class=\"col-1\"></div>\r\n                </div>\r\n                <!-- Setters -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 text-center\">\r\n                        <h3>Setters</h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-4 examples\">\r\n                        <pre><code>\r\n  function setName (x)      {\r\n    if(is_string($name)) $this->name = x;\r\n  }\r\n  function setFlag (x)      {\r\n    if(is_string($name)) $this->flag = x;\r\n  }\r\n  function setLanguage (x)  {\r\n    if(is_string($name)) $this->name = x;\r\n  }\r\n                          </code></pre>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-5 explanations\">\r\n                        <p>Les <i>setters</i> servent Ã  dÃ©finir les attributs.</p>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                </div>\r\n                <!-- Getters -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 text-center\">\r\n                        <h3>Getters</h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-5 explanations\">\r\n                        <p>Les <i>getters</i> servent Ã  accÃ©der aux attributs.</p>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-4 examples\">\r\n                        <pre><code>\r\n  function getName      { return $this->name;}\r\n  function getFlag      { return $this->flag;}\r\n  function getLanguage  { return $this->language;}\r\n                        </code></pre>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                </div>\r\n                <!-- Constructor -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 text-center\">\r\n                        <h3>Constructor</h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-4 examples\">\r\n                        <pre><code>\r\nfunction __construct($name, $flag, $language){\r\n  $this->setName($name);\r\n  $this->setFlag($flag);\r\n  $this->setLanguage($language);\r\n}\r\n                        </code></pre>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-5 explanations\">\r\n                        <p>Le <i>constructeur</i> permet d\'instancier un nouvel objet Ã  partir de la <i>classe</i>. En PHP, il est toujours dÃ©finit par la <i>fonction __constructor()</i> .</p>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                </div>\r\n                <!-- Hydrate -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 text-center\">\r\n                        <h3>Hydrate</h3>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-5 explanations\">\r\n                        <p>L\'<i>hydratation</i> sert Ã  dÃ©finir les valeurs des attributs grÃ¢ce Ã  un tableau.</p>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                    <div class=\"col-4 examples\">\r\n                        <pre><code>\r\npublic function hydrate(array $data){\r\n  foreach($data as $key => $value){\r\n    $method = \'set\'.ucfirst($key);\r\n    if(method_exists( $this, $method)){\r\n      $this->$method($value);\r\n    }\r\n\r\n  }\r\n}\r\n                        </code></pre>\r\n                    </div>\r\n                    <div class=\"col-1\"></div>\r\n                </div>\r\n            </section>\r\n\r\n'),
(6, 'RÃ©solution de portÃ©e', '    <section class=\"container-fluid\" id=\"reso\">\r\n    <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-11\"><h2>RÃ©solution de portÃ©e</h2></div>\r\n        </div>\r\n\r\n\r\n        <!-- Self -->\r\n            <div class=\"row\">\r\n                <div class=\"col-12 text-center\">\r\n                    <h3>Static</h3>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code class=\"php\">\r\nclass Pays {\r\n    public function static helloCountry($name) {\r\n        return \"Bonjour \" + $name + \" ! \";\r\n    }\r\n}\r\n\r\n// Bonjour France !\r\necho Pays::helloCountry(\"France\");\r\n                </code></pre>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-5 explanations\">\r\n            <p><i>\"static\"</i> permet d\'appeler une fonction dans une <i>classe</i> sans devoir l\'instancier.</p></div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n\r\n\r\n         <!-- Static -->\r\n            <div class=\"row\">\r\n                <div class=\"col-12 text-center\">\r\n                    <h3>Self</h3>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-5 explanations\">\r\n                <p><i>\"self\"</i> permet d\'utiliser des attributs ou des fonctions statiques.</p>\r\n                <p>Cette derniÃ¨re est utilisable uniquement dans des fonctions statiques.</p>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code>\r\nclass Pays {\r\n    private static $_pays = \"France\";\r\n\r\n    public static function showCountry() {\r\n        return self::$_pays;\r\n    }\r\n}\r\n\r\nPays::showCountry();\r\n                </code></pre>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n         <!-- This -->\r\n         <div class=\"row\">\r\n            <div class=\"col-12 text-center\">\r\n                <h3>This</h3>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code>\r\nclass Pays {\r\n    private $_name = \"France\";\r\n    private $_citizen = 50;\r\n\r\n    function addCitizen($nb) {\r\n        $this->name += nb;\r\n        return $this->name;\r\n    }\r\n}\r\n\r\n$Fr = new Pays();\r\n$Fr->addCitizen(10); // 60\r\n                </code></pre>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n\r\n            <div class=\"col-5 explanations\">\r\n                <p><i>\"this\"</i> permet de travailler sur des variables issues d\'une <i>classe</i>.</p>\r\n            </div>\r\n\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n\r\n        <!-- Parent -->\r\n        <div class=\"row\">\r\n            <div class=\"col-12 text-center\">\r\n                <h3>Parent</h3>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n\r\n            <div class=\"col-5 explanations\">\r\n\r\n            <p><i>\"parent\"</i> permet d\'appeler une fonction ou une variable issue d\'une <i>classe</i> parente.</p>\r\n        <p>Par exemple si une fonction est dÃ©clarÃ©es Ã  la fois dans une <i>classe A</i> et dans une <i>classe B</i> hÃ©ritÃ©e de la <i>classe A</i>, l\'utilisation de parent permettra le traitement de la fonction ou variable de la <i>classe A</i> (et non de la <i>classe B</i>).</p></div>\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code class=\"php\">\r\nClass Pays {\r\n    protected $name = \"France\";\r\n    protected $flag;\r\n    protected $language;\r\n\r\n    public function describe()\r\n    {\r\n        $description =  $name\r\n        + \" parle \" + $language\r\n        + \" a le drapeau \" + $drapeau;\r\n\r\n        return $description;\r\n    }\r\n}\r\n\r\nClass Region extends Pays\r\n{\r\n    protected $name;\r\n    protected $flag;\r\n    protected $language;\r\n\r\n    function __construct($name) {\r\n        $this->name = $name;\r\n    }\r\n\r\n    public function getRegion() {\r\n        return $this-name;\r\n    }\r\n\r\n    public function getPays() {\r\n        // Retourne la variable $name de la class parente\r\n        return parent::$name;\r\n    }\r\n}\r\n\r\n$bretagne = new Region(\"Bretagne\");\r\n$bretagne->getRegion(); // Bretagne\r\n$bretagne->getPays(); // France\r\n                </code></pre>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n    </section>'),
(7, 'HÃ©ritage', '    <section class=\"container-fluid greybk_whitecolor\" id=\"heri\">\r\n        <div class=\"row\">\r\n            <div class=\"col-11 text-right\"><h2>HÃ©ritage</h2></div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n    <!-- Heritage -->\r\n        <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code class=\"php\">\r\n    Class Pays {\r\n        protected $name;\r\n        protected $flag;\r\n        protected $language;\r\n\r\n        public function describe()\r\n        {\r\n        $description =  $name\r\n          + \" parle \" + $language\r\n          + \" a le drapeau \" + $drapeau;\r\n\r\n        return $description;\r\n        }\r\n    }\r\n\r\n    Class Region extends Pays{}\r\n\r\n\r\n    $bretagne = new.Region(\"bretagne\",\r\n          \"drapeauBreton\", \"breton\");\r\n\r\n    $bretagne->describe();\r\n\r\n                </code></pre>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-5 explanations\">\r\n            <p><i>L\'hÃ©ritage</i> permet Ã  une <i>classe B</i> fille d\'hÃ©riter d\'une <i>classe A</i> MÃ¨re les attributs et mÃ©thodes de celle-ci.</p>\r\n            <p>Si l\'on dÃ©clare des mÃ©thodes dans la <i>classe A</i>, et qu\'on crÃ©e une instance de la <i>classe B</i>,</p>\r\n            <p>alors on pourra appeler n\'importe quelle mÃ©thode dÃ©clarÃ©e dans la class A du moment qu\'elle est publique.</p>\r\n            <p></p>\r\n            <p>L\'attribut <i>Protected</i> des mÃ©thodes signifie que les mÃ©thodes sont accÃ¨ssible uniquement Ã  l\'intÃ©rieur des <i>classes</i>.</p>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n\r\n    </section>'),
(8, 'Interface', '    <!-- Story 6 --->\r\n    <section class=\"container-fluid\" id=\"int\">\r\n        <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-11\"><h2>Interface</h2></div>\r\n        </div>\r\n\r\n         <!-- Interface -->\r\n         <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-5 explanations\">\r\n                <p>Un <i>Interface</i> permet de dÃ©finir une ou plusieurs mÃ©thodes obligatoires pour une ou plusieurs <i>classes</i>.</p>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code>\r\n    interface Red_phone\r\n    {\r\n      public function talk(string $string);\r\n    }\r\n\r\n    class Personnage implements Red_phone { }\r\n        </code></pre>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n    </section>'),
(9, 'Autoloader', '   <section class=\"container-fluid greybk_whitecolor\" id=\"auto\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-11 text-right\"><h2>Autoloader</h2></div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n            <!-- Autoloader -->\r\n            <div class=\"row\">\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-4 examples\">\r\n                <pre><code class=\"php\">\r\n    // SANS autoloader\r\n    require \"class/Pays.php\";\r\n    require \"class/Region.php\";\r\n    //require ......\r\n\r\n    $France = new Pays();\r\n    $Bretagne = new Region();\r\n\r\n    // Avec autoloader\r\n    function my_autoloader($class)\r\n    {\r\n        // class/France.php -- cas 1\r\n        // class/Region;php -- cas 2\r\n        include \'class/\' . $class . \'.php\';\r\n    }\r\n\r\n    spl_autoload_register(\'my_autoloader\');\r\n\r\n    $France = new France(); // -- cas 1\r\n    $Bretagne = new Region(); // -- cas 2\r\n                </code></pre>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n            <div class=\"col-5 explanations\">\r\n            <p> <i>L\'autoloader</i> est une fonction permettant de charger automatiquement les <i>classes</i>,</p>\r\n            <p>ce qui permet de ne pas appeler les fichiers de <i>classe</i>.</p>\r\n            <p>Pour ce faire, il appelera une fonction (ici my_autoloader) qui s\'enclenchera dÃ¨s qu\'on fera appel Ã  une <i>classe</i>.</p>\r\n            </div>\r\n            <div class=\"col-1\"></div>\r\n        </div>\r\n\r\n    </section>');
